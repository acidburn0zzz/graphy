#summary Explains how to use Graphy
#labels Featured

= Graphy =

Graphy is a simple Python library for generating charts. It tries to get out of the way and let you just work with your data. At the moment, it produces charts using the Google Chart API. 

==Contents==

<wiki:toc max_depth="1" />

= Quick Start =

Here's a quick example, plotting average monthly rainfall for Sunnyvale, CA:
{{{
from graphy.backends import google_chart_api

monthly_rainfall = [3.2, 3.2, 2.7, 0.9, 0.4, 0.1, 0.0, 0.0, 0.2, 0.9, 1.8, 2.3]
months = 'Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec'.split()

chart = google_chart_api.LineChart(monthly_rainfall)
chart.bottom.labels = months
print chart.display.Img(400, 100)
}}}

That will print out an HTML img tag for this chart:

http://chart.apis.google.com/chart?chxt=x&chs=400x100&cht=lc&chxl=0%3A%7CJan%7CFeb%7CMar%7CApr%7CMay%7CJun%7CJul%7CAug%7CSep%7COct%7CNov%7CDec&chd=s%3A66ySKFDDGSir&chls=1%2C1%2C0&chco=0000ff&wiki=foo.png

= Line Charts =

Line charts are made by constructing a `LineChart` object and calling either its `display.Url()` or `display.Img()` methods.

== Data Series ==

You can specify a single data series when you construct a new chart (`LineChart([1, 2,3 ])`).  If you want to chart multiple series, you can call `LineChart.AddLine` to add them.

You can control the display of each series by providing `AddLine` with:
  * Label, a string which will be used to identify the series in the legend.
  * Markers, passed as a list of tuples specifying a Marker object and the X-position to draw it at.  (See the section on markers for more info)
  * Color, encoded as a hex string (like `'00ff00'`).  If you don't provide colors, the `LineChart` object will pick colors for you.
  * A `LinePattern` object.  You can make your own, but some simple ones, like `LinePattern.SOLID` and `LinePattern.DASHED` are provided for convenience.
  * Width of the line, in pixels.  `LinePattern.THIN` and `LinePattern.THICK` are provided for convenience.

{{{
from graphy.backends import google_chart_api
from graphy import line_chart

temperature = [18, 24, 32, 42, 51, 61, 66, 65, 57, 46, 35, 24]
heating_cost = [78, 75, 60, 30, 10, 7, 8, 6, 10, 25, 60, 75]

chart = google_chart_api.LineChart()
chart.AddLine(heating_cost, color='006F00',                 
                pattern=line_chart.LineStyle.SOLID, width=line_chart.LineStyle.THICK)
chart.AddLine(temperature, color='0000FF',
                pattern=line_chart.LineStyle.DASHED)
print chart.display.Img(250, 100)
}}}

http://chart.apis.google.com/chart?chd=s%3A64sVGEEDGRs4%2CMRXfltxwqiZR&chco=006F00%2C0000FF&chs=250x100&cht=lc&chls=2%2C1%2C0%7C1%2C8%2C4&wiki=foo.png

If you have gaps in your data, they are represented with None.  For example, 
{{{
google_chart_api.LineChart([10, 12, 13, 11, None, 8, 9, 7]).display.Url(100, 50)
}}}
http://chart.apis.google.com/chart?chd=s%3Afx6o_MVD&chco=0000ff&chs=100x50&cht=lc&chls=1%2C1%2C0&wiki=foo.png

TODO: Document markers

TODO: Document auto formatters a little

== Legends ==

If you specify labels when you add data series to the chart, then the chart will have a legend.  For example:

{{{
from graphy.backends import google_chart_api

temperature = [18, 24, 32, 42, 51, 61, 66, 65, 57, 46, 35, 24]
heating_cost = [78, 75, 60, 30, 10, 7, 8, 6, 10, 25, 60, 75]

chart = google_chart_api.LineChart()
chart.AddLine(heating_cost, label="Heating Cost")
chart.AddLine(temperature, label="Temperature")
print chart.display.Img(250, 100)
}}}

http://chart.apis.google.com/chart?chd=s%3A64sVGEEDGRs4%2CMRXfltxwqiZR&chco=0000ff%2Cff0000&chs=250x100&cht=lc&chls=1%2C1%2C0%7C1%2C1%2C0&chdl=Heating%20Cost%7CTemperature&wiki=foo.png

Personally, I don't like legends.  They disconnect the label from the data, making the chart harder to read.  The InlineLegend formatter can help, by replacing the legend with labels on the right-hand axis:
{{{
# Re-using chart from the last example...
from graphy import formatters
chart.AddFormatter(formatters.InlineLegend)
print chart.display.Img(250, 100)
}}}
http://chart.apis.google.com/chart?chxt=r&chd=s%3A64sVGEEDGRs4%2CMRXfltxwqiZR&chxp=0%2C75%2C24&chxr=0%2C2.4%2C81.6&chco=0000ff%2Cff0000&chs=250x100&cht=lc&chxl=0%3A%7CHeating%20Cost%7CTemperature&chls=1%2C1%2C0%7C1%2C1%2C0&wiki=foo.png


== Axes ==

TODO: This section is out of date and doesn't explain multiple axes.

Most charts support axes on all four sides of the chart: `left`, `bottom`, `right`, and `top`. A typical `LineChart` has two visible axes: the `bottom` axis represents the independent variable ("x"), and the `left` axis represents the dependent variable ("y").

To add labels to an axis, specify `axis.labels`. By default, the labels will be spread out evenly along the axis; specify `axis.label_positions` to place labels where you want them to go (you may want to set `axis.min` and `axis.max`, as well). This will let you specify your labels in same units as your data. 

{{{
from graphy.backends import google_chart_api
from graphy import line_chart

# Average Monthly Temperatures
sunnyvale = [49, 52, 55, 58, 62, 66, 68, 68, 66, 61, 54, 48, 49]
chicago   = [25, 31, 39, 50, 60, 70, 75, 74, 66, 55, 42, 30, 25]
chart = google_chart_api.LineChart()
chart.AddSeries(sunnyvale, label='Sunnyvale')  # label is used by InlineLegend, below.
chart.AddSeries(chicago, style=line_chart.LineStyle.dashed, label='Chicago')

chart.bottom.min = 0
chart.bottom.max = 12
chart.bottom.labels = ['Jan', 'Apr', 'Jul', 'Sep']
chart.bottom.label_positions = [0, 3, 6, 9]

chart.left.min = 0
chart.left.max = 80
chart.left.labels = [10, 32, 50, 70]
chart.left.label_positions = [10, 32, 50, 70]

# InlineLegend adds some labels to the right side of the chart.  We could also do it by hand:
#   chart.right.min = 0
#   chart.right.max = 80
#   chart.right.labels = ['Sunnyvale', 'Chicago']
#   chart.right.label_positions = [sunnyvale[-1], chicago[-1]]
# TODO: Talk about InlineLegend separately from introducing labels
chart.AddFormatter(formatters.InlineLegend)

print chart.display.Img(250, 100)
}}}


http://chart.apis.google.com/chart?chxt=y%2Cr%2Cx&chs=250x100&cht=lc&chxp=0%2C10%2C32%2C50%2C70%7C1%2C49%2C25%7C2%2C0%2C3%2C6%2C9&chxl=0%3A%7C10%7C32%7C50%7C70%7C1%3A%7CSunnyvale%7CChicago%7C2%3A%7CJan%7CApr%7CJul%7CSep&chxr=0%2C0%2C80%7C1%2C0%2C80%7C2%2C0%2C12&chd=s%3Aloqsvy00yvpll%2CTYemu154yqgXT&chls=1%2C1%2C0%7C1%2C8%2C4&chco=0000ff%2Cff0000&wiki=foo.png

TODO: Explain how the auto-scaling and auto min/max on left & right stuff works.  Sometimes you don't need to specify min/max, but when?

TODO: Document label separator.

TODO: Document grids


== Scaling ==

By default, your data will be scaled to fill the entire chart vertically.  This makes it easy to get a chart quickly, but it can be misleading.  For example, this looks like a dramatic drop in traffic:
{{{
traffic = [578, 579, 580, 550, 545, 552]
chart = line_chart.LineChart(traffic)
print chart.display.Img(100, 50)
}}}

http://chart.apis.google.com/chart?chs=100x50&cht=lc&chd=s%3A356LDO&chls=1%2C1%2C0&chco=0000ff&wiki=foo.png 

If you specify a min/max on the dependent axis (the `left` axis for line charts), your data will be scaled to that range instead.  By properly scaling the traffic data, you see that there is nothing to worry about:
{{{
chart.left.min = 0
chart.left.max = 600
print chart.display.Img(100, 50)
}}}

http://chart.apis.google.com/chart?chs=100x50&cht=lc&chd=s%3A777434&chls=1%2C1%2C0&chco=0000ff&wiki=foo.png 


TODO: document formatters (default, how to write your own)

= Sparklines =

In addition to LineCharts, there's also a Sparkline class.  This works like LineCharts, but doesn't have axes.

{{{
from graphy.backends import google_chart_api
prices = [78, 102, 175, 181, 160, 195, 138, 158, 179, 183, 222, 211, 215]
chart= google_chart_api.Sparkline(prices)
print '<img style="display:inline;" src="%s">' % chart.display.Url(40, 12)
}}}

Which gives you a tiny graph http://chart.apis.google.com/chart?chd=s%3ADMoqiwaiqr624&chco=0000ff&chs=40x12&cht=lfi&chls=1%2C1%2C0&wiki=foo.png  which you could inline in your webpage.

= Bar Charts =

TODO: document barcharts (AddBars, horiz/vert, stacked/not, bar thickness, gap, group gap)

{{{
from graphy.backends import google_chart_api

cities = ('SJ', 'SF', 'Oak')
population = (900000, 780000, 400000)

chart = google_chart_api.BarChart(population)
chart.bottom.labels = cities
chart.left.min = 0
print chart.display.Img(400, 120)
}}}

http://chart.apis.google.com/chart?chxt=x&chd=s%3A6ya&chco=0000ff&chs=400x120&cht=bvg&chxl=0%3A%7CSJ%7CSF%7COak&wiki=foo.png

You can change the horizontal/vertical orientation by setting `chart.vertical` to either True or False.  This does _not_ swap the axes around for you.  The left axis labels will continue to be display on the left axis, for example.
{{{
cities = ('San Jose', 'San Francisco', 'Oakland')
population = (900000, 780000, 400000)

chart = google_chart_api.BarChart(population)
chart.vertical = False
chart.left.labels = cities
chart.bottom.min = 0
print chart.display.Img(200, 120)
}}}
http://chart.apis.google.com/chart?chxt=y&chd=s%3A6ya&chco=0000ff&chs=200x120&cht=bhg&chxl=0%3A%7COakland%7CSan%20Francisco%7CSan%20Jose&wiki=foo.png

You can add labels & grids the same as with line charts:
{{{
# re-using the chart from the previous example
chart.bottom.min = 0
chart.bottom.max = 1000000
chart.bottom.labels = ['0', '500K', '1000K']
chart.bottom.grid_spacing = 500000
print chart.display.Img(200, 120)
}}}
http://chart.apis.google.com/chart?chxt=y%2Cx&chd=s%3A3wY&chxr=1%2C0%2C1000000&chco=0000ff&chs=200x120&cht=bhg&chxl=0%3A%7COakland%7CSan%20Francisco%7CSan%20Jose%7C1%3A%7C0%7C500K%7C1000K&chg=50%2C0%2C1%2C0&wiki=foo.png

If you have multiple series
{{{
TODO Write me
}}}


== Caveats/Bugs ==
Although the length of your bars will be scaled to fit in your chart, the width of the bars is not scaled automatically at all.  If you ask for a chart that's too narrow to fit all the bars, it will be cropped.  This is a limitation of the Google Chart API which is difficult to work around in Graphy.  I usually end up using trial and error to find the right size.  

For example, this crops the 4th bar:
{{{
from graphy.backends import google_chart_api
chart = google_chart_api.BarChart([1, 2, 3, 4])
print chart.display.Img(110, 110)
}}}
http://chart.apis.google.com/chart?chd=s%3ADVo6&chco=0000ff&chs=110x110&cht=bvg&wiki=foo.png

Google Chart API drops bars that are longer than your axis maximum.  For example, the 4th bar doesn't show up here:
{{{
from graphy.backends import google_chart_api
chart = google_chart_api.BarChart([1, 2, 3, 4])
chart.left.max = 3
print chart.display.Img(130, 130)
}}}
http://chart.apis.google.com/chart?chd=s%3ADg9_&chco=0000ff&chs=130x130&cht=bvg&wiki=foo.png


= Pie Charts = 

TODO: Document pie charts (AddSegment, 2d/3d, colors?)

= Google Chart API specifics =

Options which are specific to the Google Chart API live in the display object of a chart (i.e. `chart.display`)

By default, data is encoded using the simple encoding, which is terse but low-resolution.  If you need more precision, you can enable enhanced encoding by setting `chart.display.enhanced_encoding = True`.  

If you don't want the URL to be escaped, you can turn off escaping by setting `chart.display.escape_url = False`.  Unescaped URLs might not be valid in HTML, but they are easier to read which can be useful when debugging.

== Extra Params ==

You can specify individual Google Chart API parameters. This is meant as an escape-hatch in case you either want to use a parameter which `google_chart_api` doesn't support, or in case you want to override one of the parameters `google_chart_api` is generating for you.  To override parameters, add them to the `chart.display.extra_params` dict.  Any parameters you add to this will show up in the final URL.

There a list of non-abbreviated parameter names for your convenience (in `google_chart_api.py`).  Keys in the extra_params dict can be either short Google Chart URL parameters (like `chf`), or the longer equivalent (like `fill`).

For example, if you wanted to set a linear gradient background color on a chart, using 'chf', you could do it like this:
{{{
prices = [78, 102, 175, 181, 160, 195, 138, 158, 179, 183, 222, 211, 215]
chart = google_chart_api.LineChart(prices)
chart.display.extra_params['chf'] = 'c,lg,90,ffffff,1,77aaff,0'
print chart.display.Img(200, 100)
}}}
http://chart.apis.google.com/chart?chd=s%3ADMoqiwaiqr624&chf=c%2Clg%2C90%2Cffffff%2C1%2C77aaff%2C0&chco=0000ff&chs=200x100&cht=lc&chls=1%2C1%2C0&wiki=foo.png

= Deprecations =

These APIs are deprecated and will be removed soon:
  * `AddSeries` is deprecated in favor of chart-specific calls: `LineChart.AddLine`, `BarChart.AddBars`, `PieChart.AddSegments`.


= Developer's Guide =

If you want to modify Graphy internally, instead of just using it, start with the DeveloperGuide.